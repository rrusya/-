# Импорт библиотек
import networkx as nx
import matplotlib.pyplot as plt
from itertools import combinations
import re
import pandas as pd
import pylab as plt


# Создание словаря со всеми данными 1 периода (для 2018 года)
slovar = {'1': ['123', '27', '28', '150', '184', '185'],
          
         '2': ['123', '156', '243', '241', '244', '184', '185', '239'],
          
          '3' : ['241', '243', '244', '179', '110', '123', '148', '156',
                '242', '245'],
          
          '4': ['242', '128', '129', '104'],
          
          '5': ['178', '123', '156', '64', '65', '9', '71', '167',
               '168', '169', '170', '171'],
          
          '6': ['123', '131', '41', '156', '241', '244', '247', '243',
               '8', '9', '65', '101', '102', '110', '184', '245', '246'],
          
          '7': ['243', '244', '184', '245', '246'],
          
          '8' : ['48', '241', '243', '244', '159', '184', '185', '242',
                 '245', '246'],
          
          '9' : ['243', '244', '27', '33', '225.1', '150'],
          
          '10' : ['123', '131', '9', '41', '156', '16', '241', '244',
                 '184', '243', '245', '246'],
          
          '11' : ['123', '156', '242', '241', '243', '244', '248', '110',
                 '159', '184', '185', '245', '246'],
          
          '12' : ['241', '243', '244', '31', '8', '9', '65', '66', '64', '71',
                 '168', '101', '102', '110', '123', '184', '185', '239'],
          
          '13' : ['123', '156', '38', '242', '241', '243', '244', '110',
                 '159', '184', '185', '245', '246'],
          
          '14' : ['143', '30', '241', '243', '244', '16', '65', '9', '110',
                 '242', '245'],
          
          '15' : ['156', '65', '9', '13', '64', '71', '75', '151', '176',
                 '184', '185', '223'],
          
          '16' : ['122', '121', '156', '148', '75', '68', '71', '65',
                  '123', '149', '184', '185', '188'],
          
          '17' : ['123', '241', '243', '244', '110', '148', '156',
                  '242', '245'],
          
          '18' : ['137', '159', '121', '123', '156', '241', '243',
                  '244', '246', '117', '101', '102', '110', '9', '184',
                 '185', '242', '245', '239'],
          
          '19' : ['123', '156', '241', '243', '244', '159', '184', '185',
                 '242', '245', '246'],
          
          '20' : ['241','243', '244', '16', '9', '110', '242', '245'],
          
          '21' : ['122', '121', '131', '9', '41', '123', '137', '156', 
                  '241', '242', '243', '244', '245', '246', '101', '102'
                 '110', '184', '185', '239'],
          
          '22' : ['156', '241', '242', '243', '244', '246',
                  '117', '9', '65', '101', '102', '103', '104', '105',
                  '106', '107', '108', '109', '110', '123', '184', '185',
                 '239'],

          '23' : ['241', '242', '243', '244', '16', '8', '9',
                  '65', '110', '245'],
          
          '24' : ['121', '123', '137', '156', '241', '242',
                  '243', '244', '101', '102', '110',
                 '184', '185', '245', '246'],
          '25' : ['123', '156', '243', '244', '241', '239',
                  '184', '185'],

          '26' : ['241', '242', '65', '129', '32', '125', '126',
                  '184', '185', '186'],
          
          '27' : ['243', '244', '241', '184', '245', '246']}

# Создание словаря со всеми данными 2 периода (для 2023 года)

slovar = {'1': ['253', '247', '248', '248.1', '110', '167', '170'],
          
         '2': ['64', '65', '168', '71', '241', '243', '244', '150', '184',
              '185', '186', '187', '188', '243'],
          
          '3' : ['245.1', '244', '4', '254', '238', '239', '240',
                '184', '185'],
          
          '4': ['156', '241', '150', '243', '150', '151', '184', '185'],
          
          '5': ['123', '248.2', '248.1', '69', '27', '123', '167',
               '168', '169', '170', '184', '185', '247'],
          
          '6': ['248.2', '150', '247', '248.1', '248', '69', '238', '239',
               '240', '184', '185'],
          
          '7': ['245.1', '241', '244', '245', '243', '9',
                '12', '51', '65',
                 '66', '71', '106', '107', '108', '109', '110', '121', '122', '123',
               '167', '168', '169', '170', '184', '185', '242'],
          
          '8' : ['150', '43', '9'],
          
          '9' : ['184', '185', '123', '148'],
          
          '10' : ['64', '65', '168', '241', '243', '244', 
                  '9', '2', '7',
                 '8', '153', '110', '41', '123', '176'],
          
          '11' : ['71', '309', '310', '311',
                  '53', '8', '184', '185'],
          
          '12' : ['121', '156', '130', '241', '243',
                  '244', '242', '110', '123',
                 '184', '185', '245', '246'],
          
          '13' : ['121', '123', '156', '241', '243', 
                  '244', '242', '110', '184',
                 '185', '245', '246'],
          
          '14' : ['121', '123', '156', '241', '243', 
                  '244', '242', '110', '184',
                 '185', '245', '246'],
          
          '15' : ['242', '117', '118', '128', '9', '41', 
                  '65', '113', '114',
                 '165.1', '129', '2', '4', '64', '67', '68',
                 '71', '75', '184', '185'],
          
          '16' : ['49', '51', '156', '64', '65', '168',
                  '71', '241',
                 '243', '244', '248.1', '248.2', '69', 
                 '2', '4', '9', '170'],
          
          '17' : [ '248.2', '248.1', '249', '71', '184', '185', '238',
                 '239', '240'],
          
          '18' : [ '156', '241', '243', '244', '242', '238', '239',
                 '240', '184', '185'],
          
          '19' : [ '156', '241', '243', '244',
                  '242', '238', '239', '240',
                 '184', '185'],
          
          '20' : ['90', '92', '91', '93', '96', '184', '185', '186',
                 '187', '188', '199'],
          
          '21' : ['241', '243', '244', '110',
                  '123', '148', '156', '242',
                 '245'],
          
          '22' : ['241', '243', '110', 
                  '184', '185', '242', '243', '244',
                 '245', '239'],

          '23' : ['123', '248.2', '248.1',
                  '27', '71', '167', '168', '169',
                 '170', '184', '185', '247', '248'],
          
          '24' : ['150', '43', '9']}


# Наши ребра 
edges = [] 

for lawsuit, art in slovar.items():
        edges.extend(list(combinations(art, 2))) 
print(edges)


# Рассчет веса ребер
data_edges = {}

for pair in set(edges):
    
    if pair[::-1] in data_edges:
        pair = pair[::-1]
        
    data_edges[pair] = edges.count(pair) + edges.count(pair[::-1])
    
print(data_edges)


# Создание графа
our_graph = nx.Graph()

for edge, w in data_edges.items():
    our_graph.add_edge(edge[0], edge[1], weight = w)
    
print(our_graph)

edge_widths = [w for (*edge, w) in our_graph.edges.data('weight')]




# Визуализация
fig = plt.figure(figsize=(40,60))

nx.draw_spring(
    our_graph, 
    with_labels=True, 
    node_size=25000,  
    node_color='yellow',
    arrows=True,
    width=edge_widths,
    font_size= 30,
    connectionstyle="arc3, rad=0.8",
    edgecolors='black', 
    linewidths=1
)

plt.savefig('2018.png')

#Кто же в наших данных является лидером по количеству уникальных связей?
d_v = sorted(nx.degree(our_graph), key=lambda x: x[1], reverse=True)[:10]
print(d_v)


# Визуализация графика лидеров уникальных связей для 1 периода (для 2018 года)
top_d_v = [('184', 58), ('65', 56), ('185', 56), ('123', 54), ('156', 53), ('241', 50), ('9', 50), ('243', 49), ('244', 49), ('242', 45)]
article = []
dg = []
for blok in top_d_v:
    
    article.append(blok[0])
    dg.append(blok[1])
    
plt.plot(dg, article, 'ro-')
plt.figure()
plt.savefig('degree_plot.png')
plt.close()

# Визуализация графика лидеров уникальных связей для 2 периода (для 2023 года)
top_d_v = [('185', 70), ('184', 70), ('71', 60), 
           ('65', 52), ('243', 51), ('9', 50), 
           ('241', 49), ('244', 49), ('242', 46), ('168', 45)]
article = []
dg = []
for blok in top_d_v:
    
    article.append(blok[0])
    dg.append(blok[1])
    
plt.plot(dg, article, 'ro-')
plt.figure()
plt.savefig('degree_plot.png')
plt.close()

#для того, чтобы понять последние по степени
d_v = sorted(nx.degree(our_graph))
print(d_v)
print(len(d_v))
d_v = sorted(nx.degree(our_graph), key=lambda x: x[1], reverse=True)[:278]
print(d_v)


# Средний коэффициент кластеризации
from networkx.algorithms import approximation
approximation.average_clustering(our_graph, trials=1000, seed=10)
